import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const BOT_FATHER_INSTRUCTIONS = `
–¢—ã ‚Äî AI-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä "–ë–æ—Ç-–û—Ç–µ—Ü". –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —à–∞–≥ –∑–∞ —à–∞–≥–æ–º —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.

üéØ –¶–µ–ª—å:
–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AI-–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å –±–∏–∑–Ω–µ—Å, –ø–æ–º–æ–≥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –¢—ã —Å–æ–±–∏—Ä–∞–µ—à—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥ –∏ –≤ –∫–æ–Ω—Ü–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ñ—É–Ω–∫—Ü–∏—é create_bot_config.

üìå –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å:
- –ó–∞–¥–∞–≤–∞–π –¢–û–õ–¨–ö–û –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑ –∏ –∂–¥–∏ –æ—Ç–≤–µ—Ç.
- –°–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–æ—Å—Ç–æ, –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤.
- –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç.
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª ‚Äî —É—á—Ç–∏ –µ–≥–æ –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
- –í –∫–æ–Ω—Ü–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–æ—Å–∏: **"–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π?"**

üß† –ß—Ç–æ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å:
1. –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏—è –∏ —á–µ–º –æ–Ω–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è?
2. –ö—Ç–æ –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –±–æ—Ç–∞? (–∫–ª–∏–µ–Ω—Ç—ã, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –ø–∞—Ä—Ç–Ω—ë—Ä—ã –∏ —Ç.–¥.)
3. –ó–∞—á–µ–º –≤–∞–º –±–æ—Ç? –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –æ–Ω –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∞—Ç—å?
4. –ö–∞–∫ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ–±—â–∞—Ç—å—Å—è? (—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ —Ç.–¥.)
5. –ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ?
6. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–æ–ª–∂–µ–Ω —É–º–µ—Ç—å –¥–µ–ª–∞—Ç—å –±–æ—Ç? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ü–µ–Ω—ã, –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã)
7. –ï—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è?
8. –•–æ—Ç–∏—Ç–µ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–æ—Ç?
9. –ï—Å—Ç—å –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π?

üí¨ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Å—Ç–æ–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π.
- –ò—Å–ø–æ–ª—å–∑—É–π "–í—ã".
- –û–±—ä—è—Å–Ω—è–π –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º.
- –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π.

üìÑ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
–ö–æ–≥–¥–∞ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã, –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é create_bot_config —Å —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –ù–µ –ø–∏—à–∏ JSON –≤ —Ç–µ–∫—Å—Ç–µ - –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏—é!

**–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –¥–ª—è –ø–æ–ª—è instructions**:
–ü–æ–ª–µ instructions –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–û–î–†–û–ë–ù–£–Æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–º–∏–Ω–∏–º—É–º 500-800 —Å–ª–æ–≤) –ù–ê –¢–û–ú –ñ–ï –Ø–ó–´–ö–ï, –ù–ê –ö–û–¢–û–†–û–ú –û–ë–©–ê–ï–¢–°–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨:
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—â–∞–µ—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—â–∞–µ—Ç—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—â–∞–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ

**–í–ê–ñ–ù–û**: –ü–æ—Å–ª–µ —Å–±–æ—Ä–∞ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–∏ —Ñ—É–Ω–∫—Ü–∏—é create_bot_config —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
- name: –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞
- description: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- instructions: –û–ß–ï–ù–¨ –ü–û–î–†–û–ë–ù–ê–Ø –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ù–ê –¢–û–ú –ñ–ï –Ø–ó–´–ö–ï, —á—Ç–æ –∏ –æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–º–∏–Ω–∏–º—É–º 500-800 —Å–ª–æ–≤)
- personality: —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ (–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π/–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π/—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π)
- specialization: –æ–±–ª–∞—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
`;

const HR_BOT_FATHER_INSTRUCTIONS = `You are a specialized AI constructor "HR Bot-Father" for creating HR bots. Your task is to create the perfect HR assistant for personnel recruitment based on company and vacancy information.

üéØ Goal:
Create an HR bot configuration that will effectively conduct primary candidate screening, answer questions about the vacancy and company, collect resumes, and direct suitable candidates to the HR manager.

üìå How to work:
- Ask ONLY one question at a time and wait for an answer.
- Focus on HR-specific questions.
- Don't move to the next question until you get an answer.
- If the user uploaded a file - consider it as a basis for the company knowledge base.

üß† What you need to find out for the HR bot:
1. What is the company name and what field does it work in?
2. What vacancy needs to be filled? (position, level)
3. What are the main requirements for the candidate? (experience, skills, education)
4. What are the additional requirements? (language knowledge, willingness to travel, etc.)
5. What are the working conditions? (salary, schedule, office/remote, benefits)
6. What are the selection stages in the company? (interviews, testing)
7. Who is the contact person for communication with candidates?
8. What questions should the bot ask candidates for screening?
9. Is there a company presentation or job description for the knowledge base?

üí¨ Communication style:
- Friendly, simple and professional.
- Use polite form of address.
- Explain unclear things in understandable language.
- Rephrase if necessary.

üìÑ Final result:
When all answers are received, MANDATORY use the create_bot_config function with the collected data. Create a detailed instruction for the HR bot that includes:
- HR assistant role and goals
- Company and vacancy information
- Candidate requirements
- Working conditions
- Selection process
- Example screening questions
- How to direct candidates to the HR manager

The instruction should be IN THE SAME LANGUAGE as the communication with the user (minimum 500-800 words).

**CRITICALLY IMPORTANT for the instructions field**:
The instructions field should contain a MAXIMALLY DETAILED instruction (minimum 500-800 words) IN THE SAME LANGUAGE THE USER COMMUNICATES:
- If the user communicates in Russian - instruction in Russian
- If the user communicates in English - instruction in English
- If the user communicates in another language - instruction in the same language

**IMPORTANT**: After collecting all information, call the create_bot_config function with parameters:
- name: bot name
- description: brief description (1-2 sentences)
- instructions: VERY DETAILED instruction IN THE SAME LANGUAGE as communication with the user (minimum 500-800 words)
- personality: personality type (friendly/professional/formal)
- specialization: area of specialization
`;

// –ö—ç—à–∏—Ä—É–µ–º ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
let cachedAssistantId: string | null = null;
let cachedHRAssistantId: string | null = null;

const CREATE_BOT_CONFIG_FUNCTION = {
  type: "function" as const,
  function: {
    name: "create_bot_config",
    description: "–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ AI-–±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
    parameters: {
      type: "object",
      properties: {
        name: {
          type: "string",
          description: "–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞"
        },
        description: {
          type: "string",
          description: "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
        },
        instructions: {
          type: "string",
          description: "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –±–æ—Ç–∞ –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–±—â–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        },
        personality: {
          type: "string",
          description: "–¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ (–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π/–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π/—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π)"
        },
        specialization: {
          type: "string",
          description: "–û–±–ª–∞—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"
        }
      },
      required: ["name", "description", "instructions", "personality", "specialization"]
    }
  }
};

export async function getBotFatherAssistant() {
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  if (cachedAssistantId) {
    try {
      const assistant = await openai.beta.assistants.retrieve(cachedAssistantId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      if (assistant.instructions !== BOT_FATHER_INSTRUCTIONS) {
        console.log('Updating assistant instructions');
        const updatedAssistant = await openai.beta.assistants.update(cachedAssistantId, {
          instructions: BOT_FATHER_INSTRUCTIONS,
          tools: [{ type: 'file_search' }, CREATE_BOT_CONFIG_FUNCTION]
        });
        return updatedAssistant;
      }
      
      return assistant;
    } catch (error) {
      console.log('Cached assistant not found, creating new one');
      cachedAssistantId = null;
    }
  }

  // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  try {
    const assistants = await openai.beta.assistants.list();
    const existingAssistant = assistants.data.find(a => a.name === 'Bot Father');
    
    if (existingAssistant) {
      cachedAssistantId = existingAssistant.id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (existingAssistant.instructions !== BOT_FATHER_INSTRUCTIONS) {
        console.log('Updating existing assistant instructions');
        const updatedAssistant = await openai.beta.assistants.update(existingAssistant.id, {
          instructions: BOT_FATHER_INSTRUCTIONS,
          tools: [{ type: 'file_search' }, CREATE_BOT_CONFIG_FUNCTION]
        });
        return updatedAssistant;
      }
      
      return existingAssistant;
    }
  } catch (error) {
    console.error('Error listing assistants:', error);
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  try {
    const assistant = await openai.beta.assistants.create({
      name: 'Bot Father',
      instructions: BOT_FATHER_INSTRUCTIONS,
      model: 'gpt-4o',
      tools: [{ type: 'file_search' }, CREATE_BOT_CONFIG_FUNCTION]
    });
    
    cachedAssistantId = assistant.id;
    return assistant;
  } catch (error) {
    console.error('Error creating assistant:', error);
    throw error;
  }
}

export async function getHRBotFatherAssistant() {
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  if (cachedHRAssistantId) {
    try {
      const assistant = await openai.beta.assistants.retrieve(cachedHRAssistantId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      if (assistant.instructions !== HR_BOT_FATHER_INSTRUCTIONS) {
        console.log('Updating HR assistant instructions');
        const updatedAssistant = await openai.beta.assistants.update(cachedHRAssistantId, {
          instructions: HR_BOT_FATHER_INSTRUCTIONS,
          tools: [{ type: 'file_search' }, CREATE_BOT_CONFIG_FUNCTION]
        });
        return updatedAssistant;
      }
      
      return assistant;
    } catch (error) {
      console.log('Cached HR assistant not found, creating new one');
      cachedHRAssistantId = null;
    }
  }

  // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ HR –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  try {
    const assistants = await openai.beta.assistants.list();
    const existingAssistant = assistants.data.find(a => a.name === 'HR Bot Father');
    
    if (existingAssistant) {
      cachedHRAssistantId = existingAssistant.id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (existingAssistant.instructions !== HR_BOT_FATHER_INSTRUCTIONS) {
        console.log('Updating existing HR assistant instructions');
        const updatedAssistant = await openai.beta.assistants.update(existingAssistant.id, {
          instructions: HR_BOT_FATHER_INSTRUCTIONS,
          tools: [{ type: 'file_search' }, CREATE_BOT_CONFIG_FUNCTION]
        });
        return updatedAssistant;
      }
      
      return existingAssistant;
    }
  } catch (error) {
    console.error('Error listing HR assistants:', error);
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ HR –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  try {
    const assistant = await openai.beta.assistants.create({
      name: 'HR Bot Father',
      instructions: HR_BOT_FATHER_INSTRUCTIONS,
      model: 'gpt-4o',
      tools: [{ type: 'file_search' }, CREATE_BOT_CONFIG_FUNCTION]
    });
    
    cachedHRAssistantId = assistant.id;
    return assistant;
  } catch (error) {
    console.error('Error creating HR assistant:', error);
    throw error;
  }
}

export { openai };