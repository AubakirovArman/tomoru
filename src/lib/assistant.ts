import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const BOT_FATHER_INSTRUCTIONS = `
–¢—ã ‚Äî AI-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä "–ë–æ—Ç-–û—Ç–µ—Ü". –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —à–∞–≥ –∑–∞ —à–∞–≥–æ–º —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.

üéØ –¶–µ–ª—å:
–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AI-–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å –±–∏–∑–Ω–µ—Å, –ø–æ–º–æ–≥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –¢—ã —Å–æ–±–∏—Ä–∞–µ—à—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥ –∏ –≤ –∫–æ–Ω—Ü–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ñ—É–Ω–∫—Ü–∏—é create_bot_config.

üìå –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å:
- –ó–∞–¥–∞–≤–∞–π –¢–û–õ–¨–ö–û –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑ –∏ –∂–¥–∏ –æ—Ç–≤–µ—Ç.
- –°–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–æ—Å—Ç–æ, –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤.
- –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç.
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª ‚Äî —É—á—Ç–∏ –µ–≥–æ –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
- –í –∫–æ–Ω—Ü–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–æ—Å–∏: **"–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π?"**

üß† –ß—Ç–æ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å:
1. –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏—è –∏ —á–µ–º –æ–Ω–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è?
2. –ö—Ç–æ –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –±–æ—Ç–∞? (–∫–ª–∏–µ–Ω—Ç—ã, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –ø–∞—Ä—Ç–Ω—ë—Ä—ã –∏ —Ç.–¥.)
3. –ó–∞—á–µ–º –≤–∞–º –±–æ—Ç? –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –æ–Ω –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∞—Ç—å?
4. –ö–∞–∫ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ–±—â–∞—Ç—å—Å—è? (—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ —Ç.–¥.)
5. –ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ?
6. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–æ–ª–∂–µ–Ω —É–º–µ—Ç—å –¥–µ–ª–∞—Ç—å –±–æ—Ç? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ü–µ–Ω—ã, –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã)
7. –ï—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è?
8. –•–æ—Ç–∏—Ç–µ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–æ—Ç?
9. –ï—Å—Ç—å –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π?

üí¨ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Å—Ç–æ–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π.
- –ò—Å–ø–æ–ª—å–∑—É–π "–í—ã".
- –û–±—ä—è—Å–Ω—è–π –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º.
- –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π.

üìÑ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
–ö–æ–≥–¥–∞ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã, –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é create_bot_config —Å —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –ù–µ –ø–∏—à–∏ JSON –≤ —Ç–µ–∫—Å—Ç–µ - –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏—é!

**–í–ê–ñ–ù–û**: –ü–æ—Å–ª–µ —Å–±–æ—Ä–∞ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–∏ —Ñ—É–Ω–∫—Ü–∏—é create_bot_config —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
- name: –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞
- description: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- instructions: –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
- personality: —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ (–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π/–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π/—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π)
- specialization: –æ–±–ª–∞—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
`;

// –ö—ç—à–∏—Ä—É–µ–º ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
let cachedAssistantId: string | null = null;

const CREATE_BOT_CONFIG_FUNCTION = {
  type: "function" as const,
  function: {
    name: "create_bot_config",
    description: "–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ AI-–±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
    parameters: {
      type: "object",
      properties: {
        name: {
          type: "string",
          description: "–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞"
        },
        description: {
          type: "string",
          description: "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
        },
        instructions: {
          type: "string",
          description: "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –±–æ—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ"
        },
        personality: {
          type: "string",
          description: "–¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ (–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π/–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π/—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π)"
        },
        specialization: {
          type: "string",
          description: "–û–±–ª–∞—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"
        }
      },
      required: ["name", "description", "instructions", "personality", "specialization"]
    }
  }
};

export async function getBotFatherAssistant() {
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  if (cachedAssistantId) {
    try {
      const assistant = await openai.beta.assistants.retrieve(cachedAssistantId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      if (assistant.instructions !== BOT_FATHER_INSTRUCTIONS) {
        console.log('Updating assistant instructions');
        const updatedAssistant = await openai.beta.assistants.update(cachedAssistantId, {
          instructions: BOT_FATHER_INSTRUCTIONS,
          tools: [{ type: 'file_search' }, CREATE_BOT_CONFIG_FUNCTION]
        });
        return updatedAssistant;
      }
      
      return assistant;
    } catch (error) {
      console.log('Cached assistant not found, creating new one');
      cachedAssistantId = null;
    }
  }

  // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  try {
    const assistants = await openai.beta.assistants.list();
    const existingAssistant = assistants.data.find(a => a.name === 'Bot Father');
    
    if (existingAssistant) {
      cachedAssistantId = existingAssistant.id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (existingAssistant.instructions !== BOT_FATHER_INSTRUCTIONS) {
        console.log('Updating existing assistant instructions');
        const updatedAssistant = await openai.beta.assistants.update(existingAssistant.id, {
          instructions: BOT_FATHER_INSTRUCTIONS,
          tools: [{ type: 'file_search' }, CREATE_BOT_CONFIG_FUNCTION]
        });
        return updatedAssistant;
      }
      
      return existingAssistant;
    }
  } catch (error) {
    console.error('Error listing assistants:', error);
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  try {
    const assistant = await openai.beta.assistants.create({
      name: 'Bot Father',
      instructions: BOT_FATHER_INSTRUCTIONS,
      model: 'gpt-4o',
      tools: [{ type: 'file_search' }, CREATE_BOT_CONFIG_FUNCTION]
    });
    
    cachedAssistantId = assistant.id;
    return assistant;
  } catch (error) {
    console.error('Error creating assistant:', error);
    throw error;
  }
}

export { openai };