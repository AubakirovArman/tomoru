import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';
import { prisma } from '@/lib/prisma';
import { verifyToken } from '@/lib/auth';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ë–æ—Ç–∞-–û—Ç—Ü–∞
const BOT_FATHER_INSTRUCTIONS = `
–ü—Ä–∏–≤–µ—Ç! üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ç-–û—Ç–µ—Ü, –∏ —è —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é AI-–±–æ—Ç–æ–≤!

–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ù–µ –≤–æ–ª–Ω—É–π—Å—è, –µ—Å–ª–∏ —Ç—ã –Ω–µ —Ä–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª—è—Ö - —ç—Ç–æ –º–æ—è —Ä–∞–±–æ—Ç–∞! –Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∞ —Ç—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ –µ—Å—Ç—å. üòä

–ú–û–ô –ü–û–î–•–û–î:
üîç –°–Ω–∞—á–∞–ª–∞ —è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á—É –≤—Å–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—à—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
‚ùì –ó–∞—Ç–µ–º –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –≤–æ–ø—Ä–æ—Å—ã –ü–û –û–î–ù–û–ú–£ - –Ω–µ —Å–ø–µ—à—É, –∂–¥—É —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–∂–¥—ã–π
üéØ –ü–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –±–æ—Ç —Ç–µ–±–µ –Ω—É–∂–µ–Ω
‚ú® –°–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è –≥–æ—Ç–æ–≤–æ–≥–æ –∫ —Ä–∞–±–æ—Ç–µ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞

–í–ê–ñ–ù–û: –Ø –∑–∞–¥–∞—é —Ç–æ–ª—å–∫–æ –û–î–ò–ù –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑ –∏ –≤—Å–µ–≥–¥–∞ –∂–¥—É —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ - —Å–∫–∞–∂–∏, —è –æ–±—ä—è—Å–Ω—é –ø—Ä–æ—â–µ!

–ú–û–ò –≠–¢–ê–ü–´ –†–ê–ë–û–¢–´:

1. –ó–ù–ê–ö–û–ú–°–¢–í–û –ò –ê–ù–ê–õ–ò–ó:
   - –ò–∑—É—á–∞—é —Ç–≤–æ–∏ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
   - –£–∑–Ω–∞—é –æ —Ç–≤–æ–µ–º –±–∏–∑–Ω–µ—Å–µ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
   - –ü–æ–Ω–∏–º–∞—é, —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è

2. –ü–û–®–ê–ì–û–í–´–ï –í–û–ü–†–û–°–´ (–ø–æ –æ–¥–Ω–æ–º—É!):
   - –î–ª—è –∫–æ–≥–æ —Å–æ–∑–¥–∞–µ–º –±–æ—Ç–∞? (–∫–ª–∏–µ–Ω—Ç—ã, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –ø–∞—Ä—Ç–Ω–µ—Ä—ã?)
   - –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∞—Ç—å –±–æ—Ç?
   - –ö–∞–∫ –¥–æ–ª–∂–µ–Ω –æ–±—â–∞—Ç—å—Å—è –±–æ—Ç? (—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ?)
   - –ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–æ—Ç –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å?
   - –ï—Å—Ç—å –ª–∏ –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è?

3. –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–ê:
   - –ü–∏—à—É –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞
   - –í–∫–ª—é—á–∞—é –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ–µ–º –±–∏–∑–Ω–µ—Å–µ
   - –î–æ–±–∞–≤–ª—è—é –ø—Ä–∏–º–µ—Ä—ã –æ–±—â–µ–Ω–∏—è
   - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ —Å—Ç–∏–ª—å

–ò–¢–û–ì–û–í–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø (—Å–æ–∑–¥–∞—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤):
{
  "name": "–ü–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞",
  "description": "–ü—Ä–æ—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç",
  "instructions": "–û—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏, –ø—Ä–∞–≤–∏–ª–∞–º–∏, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å—Ç–∏–ª–µ –æ–±—â–µ–Ω–∏—è",
  "personality": "–û–ø–∏—Å–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏ –º–∞–Ω–µ—Ä—ã –æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞",
  "specialization": "–û—Å–Ω–æ–≤–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞",
  "knowledge_base": "–í—Å—è –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —É—Å–ª—É–≥–∞—Ö"
}

–ü–æ–º–Ω–∏: —è —Å–æ–∑–¥–∞—é –±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏ –∑–Ω–∞—é—Ç –≤—Å–µ –æ —Ç–≤–æ–µ–º –±–∏–∑–Ω–µ—Å–µ!

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π! üöÄ
`;

export async function POST(request: NextRequest) {
  try {
    const { message, threadId, files } = await request.json();

    let thread;
    if (threadId) {
      thread = await openai.beta.threads.retrieve(threadId);
    } else {
      thread = await openai.beta.threads.create();
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await openai.beta.threads.messages.create(thread.id, {
      role: 'user',
      content: message,
      ...(files && files.length > 0 && {
        attachments: files.map((fileId: string) => ({
          file_id: fileId,
          tools: [{ type: 'file_search' }]
        }))
      })
    });

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    let assistant;
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      const assistants = await openai.beta.assistants.list();
      assistant = assistants.data.find(a => a.name === 'Bot Father');
      
      if (!assistant) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant = await openai.beta.assistants.create({
          name: 'Bot Father',
          instructions: BOT_FATHER_INSTRUCTIONS,
          model: 'gpt-4-turbo-preview'
        });
      }
    } catch (error) {
      console.error('Error with assistant:', error);
      return NextResponse.json(
        { error: 'Failed to create or retrieve assistant' },
        { status: 500 }
      );
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const run = await openai.beta.threads.runs.create(thread.id, {
      assistant_id: assistant.id
    });

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    let runStatus = run;
    
    while (runStatus.status === 'in_progress' || runStatus.status === 'queued') {
       await new Promise(resolve => setTimeout(resolve, 1000));
       try {
         const runs = await openai.beta.threads.runs.list(thread.id);
         const currentRun = runs.data.find(r => r.id === run.id);
         if (currentRun) {
           runStatus = currentRun;
         } else {
           break;
         }
       } catch (error) {
         console.error('Error retrieving run status:', error);
         break;
       }
     }

    if (runStatus.status === 'completed') {
      const messages = await openai.beta.threads.messages.list(thread.id);
      const lastMessage = messages.data.find((msg: any) => msg.role === 'assistant');
      
      let response = '';
      if (lastMessage?.content[0]?.type === 'text') {
        response = lastMessage.content[0].text.value;
      } else {
        response = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.';
      }
      let botConfig = null;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ –æ—Ç–≤–µ—Ç–µ
      const jsonMatch = response.match(/\{[\s\S]*?\}/);
      if (jsonMatch) {
        try {
          botConfig = JSON.parse(jsonMatch[0]);
          response = response.replace(jsonMatch[0], '').trim();
        } catch (e) {
          console.error('JSON parse error:', e);
        }
      }

      return NextResponse.json({
        response,
        threadId: thread.id,
        botConfig
      });
    }

    return NextResponse.json({
      response: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.',
      threadId: thread.id
    });

  } catch (error) {
    console.error('Error in bot-creator API:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

export async function PUT(request: NextRequest) {
  try {
    const { botConfig, files } = await request.json();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const token = authHeader.substring(7);
    const decoded = verifyToken(token);
    if (!decoded) {
      return NextResponse.json(
        { error: 'Invalid token' },
        { status: 401 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ OpenAI
    const assistant = await openai.beta.assistants.create({
      name: botConfig.name,
      instructions: botConfig.instructions,
      model: 'gpt-4-turbo-preview',
      tools: [{ type: 'file_search' }],
      ...(files && files.length > 0 && {
        tool_resources: {
          file_search: {
            vector_store_ids: files
          }
        }
      })
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const savedBot = await prisma.bot.create({
      data: {
        name: botConfig.name,
        description: botConfig.description,
        instructions: botConfig.instructions,
        personality: botConfig.personality,
        specialization: botConfig.specialization,
        openaiId: assistant.id,
        userId: decoded.userId
      }
    });

    return NextResponse.json({
      success: true,
      assistantId: assistant.id,
      botId: savedBot.id,
      botConfig
    });

  } catch (error) {
    console.error('Error creating bot:', error);
    return NextResponse.json(
      { error: 'Failed to create bot' },
      { status: 500 }
    );
  }
}